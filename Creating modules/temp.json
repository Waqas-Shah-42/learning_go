[
    {
        "engine_name": "structure",
        "fingerprint": "a779b495fe7c00391268c472a69c503f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `authentication` has a Cognitive Complexity of 33 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/middlwares/auth.ts",
            "lines": {
                "begin": 6,
                "end": 55
            }
        },
        "other_locations": [],
        "remediation_points": 2950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "15a543fcbd0865cf734ac6f8c3f3dc3d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `authentication` has 47 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/middlewares/auth.ts",
            "lines": {
                "begin": 6,
                "end": 55
            }
        },
        "other_locations": [],
        "remediation_points": 1128000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b1112e49330559f98bc4b2d6f1e77be4",
        "categories": [
            "Complexity"
        ],
        "check_name": "nested_control_flow",
        "content": {
            "body": ""
        },
        "description": "Avoid deeply nested control flow statements.",
        "location": {
            "path": "src/api/v1/middlewares/auth.ts",
            "lines": {
                "begin": 22,
                "end": 26
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "7db83d4a57cf76bcffd705ca3570b0fd",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createAllowedDepotRepository` has 39 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 5,
                "end": 47
            }
        },
        "other_locations": [],
        "remediation_points": 936000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "8fea8610d2ea7b1dc19d9262e0c86a15",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsRepository` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 49,
                "end": 80
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f551f3cd2780bb9ae64320f39c6932d8",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsPaginationRepository` has 32 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 82,
                "end": 122
            }
        },
        "other_locations": [],
        "remediation_points": 768000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b4ec03728f5b4cd28e7e8bef0d6cc9c5",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateAllowedDepotRepository` has 27 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 124,
                "end": 155
            }
        },
        "other_locations": [],
        "remediation_points": 648000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e1814c32471fc07fae69de3e6c28b2c3",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateDriverRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 81,
                "end": 114
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b39750cc688dc66abb48b3669634df69",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addDriverRepository` has 37 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 888000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c59a17880e89c4b214c5edbc1ca6843d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDriversRepository` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 47,
                "end": 79
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "2918e261171262eabbd290a97a261723",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateDriverRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 81,
                "end": 114
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b3953620cd85da8df81426f333ecfd2d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createRoleRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/roles.repository.ts",
            "lines": {
                "begin": 5,
                "end": 39
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "40a8fcae3f177cc9d4846a5dc01b8c25",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createOMCRespository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/omcs.repository.ts",
            "lines": {
                "begin": 6,
                "end": 71
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ba387cfcd525054434655dae1269c6c0",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createOMCRespository` has 60 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/omcs.repository.ts",
            "lines": {
                "begin": 6,
                "end": 71
            }
        },
        "other_locations": [],
        "remediation_points": 1440000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "bb228b3c0766bcdfb5cca488c1220e43",
        "categories": [
            "Complexity"
        ],
        "check_name": "file_lines",
        "content": {
            "body": ""
        },
        "description": "File `users.repository.ts` has 253 lines of code (exceeds 250 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 1,
                "end": 276
            }
        },
        "other_locations": [],
        "remediation_points": 1243200,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "80ac1f5fd3f86a9220a8afb61565d3b0",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createUserRespository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 8,
                "end": 49
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "5e3964d2000100043eacb6b5bb8b4bad",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `userLogInRespository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 51,
                "end": 108
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "8304416d451d98004eea856e20f1f27a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createUserRespository` has 39 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 8,
                "end": 49
            }
        },
        "other_locations": [],
        "remediation_points": 936000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "dd0f11c3acb1f52819a1598e65f17a7d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `userLogInRespository` has 50 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 51,
                "end": 108
            }
        },
        "other_locations": [],
        "remediation_points": 1200000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f8f2b2f6247e220c7b1ac8519de24b73",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `userLoginByTokenAuthRespository` has 44 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 156,
                "end": 204
            }
        },
        "other_locations": [],
        "remediation_points": 1056000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "9f611be2fed027b24ad8ee71bfaba513",
        "categories": [
            "Complexity"
        ],
        "check_name": "file_lines",
        "content": {
            "body": ""
        },
        "description": "File `dispatch.repository.ts` has 489 lines of code (exceeds 250 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 1,
                "end": 525
            }
        },
        "other_locations": [],
        "remediation_points": 4641600,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "7cb104c4cfb50f129ae6d62646e8879d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addDispatchRespository` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 10,
                "end": 155
            }
        },
        "other_locations": [],
        "remediation_points": 1550000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "58ea43405a50bd0740ff82946c43d440",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDispatchesRespository` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 157,
                "end": 222
            }
        },
        "other_locations": [],
        "remediation_points": 950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "1c986e4e34b4527875df9654be12a200",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getPersonalDispatchesRespository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 224,
                "end": 276
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "d908ade55ff8c1ce86569081caa3c6b8",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getReceivingDispatchesRespository` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 278,
                "end": 337
            }
        },
        "other_locations": [],
        "remediation_points": 750000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e4b1549ad6827926ca6b83b544610e71",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateDispatchRespository` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 339,
                "end": 398
            }
        },
        "other_locations": [],
        "remediation_points": 750000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "683b3f1f70abfee04c32dd28486bbf3a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `deleteDispatchRespository` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 400,
                "end": 435
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "482e2ff2e7bf9453f2dacb16ad321e4c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDispatchesCounts` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 437,
                "end": 478
            }
        },
        "other_locations": [],
        "remediation_points": 950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "0b13040f30fff0a2a6dcfd85bad7c9b6",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getReceivingDispatchesCounts` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 480,
                "end": 515
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e30187f39487e07fd80e368ea1e87ede",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addDispatchRespository` has 132 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 10,
                "end": 155
            }
        },
        "other_locations": [],
        "remediation_points": 3168000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ab597a3903114c9eb37b88e9c56bb695",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesRespository` has 52 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 157,
                "end": 222
            }
        },
        "other_locations": [],
        "remediation_points": 1248000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "cce2f6b98c2c86dbca6d6b3313c0e92d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getPersonalDispatchesRespository` has 43 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 224,
                "end": 276
            }
        },
        "other_locations": [],
        "remediation_points": 1032000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f7eb14695204565c8898df3deca6d5ff",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getReceivingDispatchesRespository` has 50 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 278,
                "end": 337
            }
        },
        "other_locations": [],
        "remediation_points": 1200000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "bbd1a8dc87e5490349dad53a529cb931",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateDispatchRespository` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 339,
                "end": 398
            }
        },
        "other_locations": [],
        "remediation_points": 1272000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "31c38e43a6302246af967ec378680de6",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `deleteDispatchRespository` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 400,
                "end": 435
            }
        },
        "other_locations": [],
        "remediation_points": 744000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "41f07ba7b4104db2aee341312220a60f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesCounts` has 37 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 437,
                "end": 478
            }
        },
        "other_locations": [],
        "remediation_points": 888000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b6ae5ff7b302eef9688057dabcc30cba",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getReceivingDispatchesCounts` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 480,
                "end": 515
            }
        },
        "other_locations": [],
        "remediation_points": 744000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c955ae6966786dbe8c34724f3aefa001",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addVehicleRepository` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 6,
                "end": 62
            }
        },
        "other_locations": [],
        "remediation_points": 550000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "422526386bfff14ea4fa4051e2cde866",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateVehicleRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 121,
                "end": 154
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "9ce358184931ecf2f80a87b7f542866c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addVehicleRepository` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 6,
                "end": 62
            }
        },
        "other_locations": [],
        "remediation_points": 1272000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "010d6dc86f758d80b103e3df27bff36f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateVehicleRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 121,
                "end": 154
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b02bf62c5bce34ae456a0b89f972ba0a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateVehicleOMCHistoryRepository` has 32 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 156,
                "end": 194
            }
        },
        "other_locations": [],
        "remediation_points": 768000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6b77baf17d20b0c2f59621ccd2ca8143",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addDepotRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "67f75a09d70df349b14ea84b1b1fd307",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateDepotRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 89,
                "end": 122
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "989a0167fd70baa88867eca0b2c20e03",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addDepotRepository` has 37 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 888000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "8fb608abde1b0ca70feadef446719a36",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateDepotRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 89,
                "end": 122
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "07817257b1436df738a59bb1ad714063",
        "categories": [
            "Complexity"
        ],
        "check_name": "file_lines",
        "content": {
            "body": ""
        },
        "description": "File `dashBoardCounts.repository.ts` has 386 lines of code (exceeds 250 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 1,
                "end": 413
            }
        },
        "other_locations": [],
        "remediation_points": 3158400,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "23eadba1cb2e3fdd13485a3b952f8d19",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDashboardCountsRepository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 10,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "5a12f41fce60f9d8f81fee59b975d084",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDispatchesCounts` has a Cognitive Complexity of 23 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 78,
                "end": 214
            }
        },
        "other_locations": [],
        "remediation_points": 1950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "2cbd5a36cebbd04917812bc9bef36a6f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getUsersCount` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 307,
                "end": 356
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "d989b31b589d67474c83a989e34d209d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDashboardCountsRepository` has 62 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 10,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 1488000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "5e7392088afe225acd8a608efbb71d8c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesCounts` has 128 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 78,
                "end": 214
            }
        },
        "other_locations": [],
        "remediation_points": 3072000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "39d23e8603be53e8ba1e37e75328f7f8",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsCount` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 216,
                "end": 243
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "935caafd6423a21e17bfef48a68a47be",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDriversCount` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 245,
                "end": 274
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ab7fd8757549ea8c52738fc4afc75236",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getVehiclesCount` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 276,
                "end": 305
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "06a15cab975f5ec8932cf4d0cbb36c33",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getUsersCount` has 47 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 307,
                "end": 356
            }
        },
        "other_locations": [],
        "remediation_points": 1128000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ca41cd20fae8fe24b58b6a87a73efb34",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createCityRepository` has 28 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/cities.repository.ts",
            "lines": {
                "begin": 5,
                "end": 38
            }
        },
        "other_locations": [],
        "remediation_points": 672000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "50d360d54f2cc0f4e547560a7b666e5a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addIfemLocationRepository` has 32 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/ifemLocation.repository.ts",
            "lines": {
                "begin": 5,
                "end": 40
            }
        },
        "other_locations": [],
        "remediation_points": 768000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ae4c1b5010479273270a0534fe860e39",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDistrictRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/districts.repository.ts",
            "lines": {
                "begin": 5,
                "end": 37
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6d5878f00206bc276167576944606559",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsPaginationService` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/services/allowedDepots.services.ts",
            "lines": {
                "begin": 48,
                "end": 80
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c8613081392269e9843f14a82eb28002",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesService` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/services/dispatch.services.ts",
            "lines": {
                "begin": 29,
                "end": 67
            }
        },
        "other_locations": [],
        "remediation_points": 744000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e71033697c98320a67e54dcb8a1fb712",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getReceivingDispatchesService` has 30 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/services/dispatch.services.ts",
            "lines": {
                "begin": 102,
                "end": 138
            }
        },
        "other_locations": [],
        "remediation_points": 720000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "3b0ef69cd6f2a4d20fed806f997fc152",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createVehicleValidation` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 5,
                "end": 57
            }
        },
        "other_locations": [],
        "remediation_points": 750000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e1d1a8dc55a0e7333b2e3b323854b94c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateVehicleValidation` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 59,
                "end": 95
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6605a0d5931a19a49c65c3f2c3acc73f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createVehicleValidation` has 46 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 5,
                "end": 57
            }
        },
        "other_locations": [],
        "remediation_points": 1104000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c6400dfe772fca55441e848addae226a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateVehicleValidation` has 30 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 59,
                "end": 95
            }
        },
        "other_locations": [],
        "remediation_points": 720000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "d32c434a80f6c4471073db53e83dcf4a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createDriversValidation` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/drivers.validations.ts",
            "lines": {
                "begin": 5,
                "end": 64
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "4ef1c34a56aa29219c7a395e7c3023de",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDriversValidation` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/drivers.validations.ts",
            "lines": {
                "begin": 5,
                "end": 64
            }
        },
        "other_locations": [],
        "remediation_points": 1272000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "00c3e0f5b7758d70d514d5bd15e0b7bc",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createCityValidation` has 28 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/cities.validations.ts",
            "lines": {
                "begin": 5,
                "end": 35
            }
        },
        "other_locations": [],
        "remediation_points": 672000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "4eefa0d0d904eac8e4a2a9736dd1d730",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createAllowedDepotValidation` has 40 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/allowedDepots.validations.ts",
            "lines": {
                "begin": 5,
                "end": 48
            }
        },
        "other_locations": [],
        "remediation_points": 960000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f74ef233d9f4b882ff1390ad7717ecef",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addUserValidation` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/users.validations.ts",
            "lines": {
                "begin": 4,
                "end": 52
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "0965bc00d566b30ef597920242c6ae6b",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addUserValidation` has 41 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/users.validations.ts",
            "lines": {
                "begin": 4,
                "end": 52
            }
        },
        "other_locations": [],
        "remediation_points": 984000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "4f2ee9fedc185da1f8d1485fd3e1f93f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateUserValidation` has 34 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/users.validations.ts",
            "lines": {
                "begin": 81,
                "end": 119
            }
        },
        "other_locations": [],
        "remediation_points": 816000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "840c520eb68a4737a4fb6bb58df18158",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createDispatchValidation` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/dispatch.validations.ts",
            "lines": {
                "begin": 5,
                "end": 43
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "06ef257a8b8dccb3e8b42f93e0ebc03c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDispatchValidation` has 36 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/dispatch.validations.ts",
            "lines": {
                "begin": 5,
                "end": 43
            }
        },
        "other_locations": [],
        "remediation_points": 864000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c7f1c1d9259f447d83563c6f14561434",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createOMCValidation` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/omcs.validations.ts",
            "lines": {
                "begin": 5,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 850000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "019fac41ddb14bca2b1e52aa988bf7af",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createOMCValidation` has 64 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/omcs.validations.ts",
            "lines": {
                "begin": 5,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 1536000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "cd867501ab007aacc940406393daf2db",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createCarriageContractorValidation` has 27 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/carriageContractor.validations.ts",
            "lines": {
                "begin": 5,
                "end": 39
            }
        },
        "other_locations": [],
        "remediation_points": 648000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6eb501118f97d1b48636e7a9a56bb059",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDistrictValidation` has 28 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/districts.validations.ts",
            "lines": {
                "begin": 5,
                "end": 36
            }
        },
        "other_locations": [],
        "remediation_points": 672000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "3b7498148d0f2db71633c2566925f9e7",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createIFEMLocationValidation` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/ifemLocation.validations.ts",
            "lines": {
                "begin": 5,
                "end": 37
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c4b3032fd7ab908e718040a2c4ab5d0f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createDepotValidation` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/depots.validations.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "3d6b684ba655ed405e042ba3162861c6",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDepotValidation` has 36 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/depots.validations.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 864000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c2f9c568ed380c9d4cd91ee687a66710",
        "categories": [
            "Complexity"
        ],
        "check_name": "complex_logic",
        "content": {
            "body": ""
        },
        "description": "Consider simplifying this complex logical expression.",
        "location": {
            "path": "src/api/v1/helpers/fileHandler.ts",
            "lines": {
                "begin": 23,
                "end": 39
            }
        },
        "other_locations": [],
        "remediation_points": 1000000,
        "severity": "critical",
        "type": "issue"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 10,
                    "column": 42
                },
                "end": {
                    "line": 10,
                    "column": 42
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 17,
                    "column": 32
                },
                "end": {
                    "line": 17,
                    "column": 32
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 18,
                    "column": 8
                },
                "end": {
                    "line": 18,
                    "column": 8
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 19,
                    "column": 6
                },
                "end": {
                    "line": 19,
                    "column": 6
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 22,
                    "column": 31
                },
                "end": {
                    "line": 22,
                    "column": 31
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 24,
                    "column": 50
                },
                "end": {
                    "line": 24,
                    "column": 50
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 10,
                    "column": 23
                },
                "end": {
                    "line": 10,
                    "column": 23
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 18,
                    "column": 32
                },
                "end": {
                    "line": 18,
                    "column": 32
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 25,
                    "column": 70
                },
                "end": {
                    "line": 25,
                    "column": 70
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 26,
                    "column": 12
                },
                "end": {
                    "line": 26,
                    "column": 12
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 28,
                    "column": 32
                },
                "end": {
                    "line": 28,
                    "column": 32
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 29,
                    "column": 8
                },
                "end": {
                    "line": 29,
                    "column": 8
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 30,
                    "column": 6
                },
                "end": {
                    "line": 30,
                    "column": 6
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 33,
                    "column": 31
                },
                "end": {
                    "line": 33,
                    "column": 31
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 34,
                    "column": 4
                },
                "end": {
                    "line": 34,
                    "column": 4
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    }
][
    {
        "engine_name": "structure",
        "fingerprint": "a779b495fe7c00391268c472a69c503f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `authentication` has a Cognitive Complexity of 33 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/middlewares/auth.ts",
            "lines": {
                "begin": 6,
                "end": 55
            }
        },
        "other_locations": [],
        "remediation_points": 2950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "15a543fcbd0865cf734ac6f8c3f3dc3d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `authentication` has 47 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/middlewares/auth.ts",
            "lines": {
                "begin": 6,
                "end": 55
            }
        },
        "other_locations": [],
        "remediation_points": 1128000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b1112e49330559f98bc4b2d6f1e77be4",
        "categories": [
            "Complexity"
        ],
        "check_name": "nested_control_flow",
        "content": {
            "body": ""
        },
        "description": "Avoid deeply nested control flow statements.",
        "location": {
            "path": "src/api/v1/middlewares/auth.ts",
            "lines": {
                "begin": 22,
                "end": 26
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "7db83d4a57cf76bcffd705ca3570b0fd",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createAllowedDepotRepository` has 39 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 5,
                "end": 47
            }
        },
        "other_locations": [],
        "remediation_points": 936000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "8fea8610d2ea7b1dc19d9262e0c86a15",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsRepository` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 49,
                "end": 80
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f551f3cd2780bb9ae64320f39c6932d8",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsPaginationRepository` has 32 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 82,
                "end": 122
            }
        },
        "other_locations": [],
        "remediation_points": 768000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b4ec03728f5b4cd28e7e8bef0d6cc9c5",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateAllowedDepotRepository` has 27 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/allowedDepots.repository.ts",
            "lines": {
                "begin": 124,
                "end": 155
            }
        },
        "other_locations": [],
        "remediation_points": 648000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e1814c32471fc07fae69de3e6c28b2c3",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateDriverRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 81,
                "end": 114
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b39750cc688dc66abb48b3669634df69",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addDriverRepository` has 37 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 888000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c59a17880e89c4b214c5edbc1ca6843d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDriversRepository` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 47,
                "end": 79
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "2918e261171262eabbd290a97a261723",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateDriverRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/drivers.repository.ts",
            "lines": {
                "begin": 81,
                "end": 114
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b3953620cd85da8df81426f333ecfd2d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createRoleRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/roles.repository.ts",
            "lines": {
                "begin": 5,
                "end": 39
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "40a8fcae3f177cc9d4846a5dc01b8c25",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createOMCRespository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/omcs.repository.ts",
            "lines": {
                "begin": 6,
                "end": 71
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ba387cfcd525054434655dae1269c6c0",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createOMCRespository` has 60 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/omcs.repository.ts",
            "lines": {
                "begin": 6,
                "end": 71
            }
        },
        "other_locations": [],
        "remediation_points": 1440000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "bb228b3c0766bcdfb5cca488c1220e43",
        "categories": [
            "Complexity"
        ],
        "check_name": "file_lines",
        "content": {
            "body": ""
        },
        "description": "File `users.repository.ts` has 253 lines of code (exceeds 250 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 1,
                "end": 276
            }
        },
        "other_locations": [],
        "remediation_points": 1243200,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "80ac1f5fd3f86a9220a8afb61565d3b0",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createUserRespository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 8,
                "end": 49
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "5e3964d2000100043eacb6b5bb8b4bad",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `userLogInRespository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 51,
                "end": 108
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "8304416d451d98004eea856e20f1f27a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createUserRespository` has 39 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 8,
                "end": 49
            }
        },
        "other_locations": [],
        "remediation_points": 936000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "dd0f11c3acb1f52819a1598e65f17a7d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `userLogInRespository` has 50 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 51,
                "end": 108
            }
        },
        "other_locations": [],
        "remediation_points": 1200000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f8f2b2f6247e220c7b1ac8519de24b73",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `userLoginByTokenAuthRespository` has 44 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/users.repository.ts",
            "lines": {
                "begin": 156,
                "end": 204
            }
        },
        "other_locations": [],
        "remediation_points": 1056000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "9f611be2fed027b24ad8ee71bfaba513",
        "categories": [
            "Complexity"
        ],
        "check_name": "file_lines",
        "content": {
            "body": ""
        },
        "description": "File `dispatch.repository.ts` has 489 lines of code (exceeds 250 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 1,
                "end": 525
            }
        },
        "other_locations": [],
        "remediation_points": 4641600,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "7cb104c4cfb50f129ae6d62646e8879d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addDispatchRespository` has a Cognitive Complexity of 19 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 10,
                "end": 155
            }
        },
        "other_locations": [],
        "remediation_points": 1550000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "58ea43405a50bd0740ff82946c43d440",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDispatchesRespository` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 157,
                "end": 222
            }
        },
        "other_locations": [],
        "remediation_points": 950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "1c986e4e34b4527875df9654be12a200",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getPersonalDispatchesRespository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 224,
                "end": 276
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "d908ade55ff8c1ce86569081caa3c6b8",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getReceivingDispatchesRespository` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 278,
                "end": 337
            }
        },
        "other_locations": [],
        "remediation_points": 750000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e4b1549ad6827926ca6b83b544610e71",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateDispatchRespository` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 339,
                "end": 398
            }
        },
        "other_locations": [],
        "remediation_points": 750000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "683b3f1f70abfee04c32dd28486bbf3a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `deleteDispatchRespository` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 400,
                "end": 435
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "482e2ff2e7bf9453f2dacb16ad321e4c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDispatchesCounts` has a Cognitive Complexity of 13 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 437,
                "end": 478
            }
        },
        "other_locations": [],
        "remediation_points": 950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "0b13040f30fff0a2a6dcfd85bad7c9b6",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getReceivingDispatchesCounts` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 480,
                "end": 515
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e30187f39487e07fd80e368ea1e87ede",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addDispatchRespository` has 132 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 10,
                "end": 155
            }
        },
        "other_locations": [],
        "remediation_points": 3168000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ab597a3903114c9eb37b88e9c56bb695",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesRespository` has 52 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 157,
                "end": 222
            }
        },
        "other_locations": [],
        "remediation_points": 1248000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "cce2f6b98c2c86dbca6d6b3313c0e92d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getPersonalDispatchesRespository` has 43 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 224,
                "end": 276
            }
        },
        "other_locations": [],
        "remediation_points": 1032000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f7eb14695204565c8898df3deca6d5ff",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getReceivingDispatchesRespository` has 50 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 278,
                "end": 337
            }
        },
        "other_locations": [],
        "remediation_points": 1200000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "bbd1a8dc87e5490349dad53a529cb931",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateDispatchRespository` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 339,
                "end": 398
            }
        },
        "other_locations": [],
        "remediation_points": 1272000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "31c38e43a6302246af967ec378680de6",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `deleteDispatchRespository` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 400,
                "end": 435
            }
        },
        "other_locations": [],
        "remediation_points": 744000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "41f07ba7b4104db2aee341312220a60f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesCounts` has 37 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 437,
                "end": 478
            }
        },
        "other_locations": [],
        "remediation_points": 888000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b6ae5ff7b302eef9688057dabcc30cba",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getReceivingDispatchesCounts` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dispatch.repository.ts",
            "lines": {
                "begin": 480,
                "end": 515
            }
        },
        "other_locations": [],
        "remediation_points": 744000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c955ae6966786dbe8c34724f3aefa001",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addVehicleRepository` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 6,
                "end": 62
            }
        },
        "other_locations": [],
        "remediation_points": 550000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "422526386bfff14ea4fa4051e2cde866",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateVehicleRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 121,
                "end": 154
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "9ce358184931ecf2f80a87b7f542866c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addVehicleRepository` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 6,
                "end": 62
            }
        },
        "other_locations": [],
        "remediation_points": 1272000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "010d6dc86f758d80b103e3df27bff36f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateVehicleRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 121,
                "end": 154
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "b02bf62c5bce34ae456a0b89f972ba0a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateVehicleOMCHistoryRepository` has 32 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/vehicles.repository.ts",
            "lines": {
                "begin": 156,
                "end": 194
            }
        },
        "other_locations": [],
        "remediation_points": 768000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6b77baf17d20b0c2f59621ccd2ca8143",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addDepotRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "67f75a09d70df349b14ea84b1b1fd307",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateDepotRepository` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 89,
                "end": 122
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "989a0167fd70baa88867eca0b2c20e03",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addDepotRepository` has 37 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 888000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "8fb608abde1b0ca70feadef446719a36",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateDepotRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/depots.repository.ts",
            "lines": {
                "begin": 89,
                "end": 122
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "07817257b1436df738a59bb1ad714063",
        "categories": [
            "Complexity"
        ],
        "check_name": "file_lines",
        "content": {
            "body": ""
        },
        "description": "File `dashBoardCounts.repository.ts` has 386 lines of code (exceeds 250 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 1,
                "end": 413
            }
        },
        "other_locations": [],
        "remediation_points": 3158400,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "23eadba1cb2e3fdd13485a3b952f8d19",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDashboardCountsRepository` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 10,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "5a12f41fce60f9d8f81fee59b975d084",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getDispatchesCounts` has a Cognitive Complexity of 23 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 78,
                "end": 214
            }
        },
        "other_locations": [],
        "remediation_points": 1950000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "2cbd5a36cebbd04917812bc9bef36a6f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `getUsersCount` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 307,
                "end": 356
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "d989b31b589d67474c83a989e34d209d",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDashboardCountsRepository` has 62 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 10,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 1488000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "5e7392088afe225acd8a608efbb71d8c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesCounts` has 128 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 78,
                "end": 214
            }
        },
        "other_locations": [],
        "remediation_points": 3072000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "39d23e8603be53e8ba1e37e75328f7f8",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsCount` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 216,
                "end": 243
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "935caafd6423a21e17bfef48a68a47be",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDriversCount` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 245,
                "end": 274
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ab7fd8757549ea8c52738fc4afc75236",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getVehiclesCount` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 276,
                "end": 305
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "06a15cab975f5ec8932cf4d0cbb36c33",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getUsersCount` has 47 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/dashBoardCounts.repository.ts",
            "lines": {
                "begin": 307,
                "end": 356
            }
        },
        "other_locations": [],
        "remediation_points": 1128000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ca41cd20fae8fe24b58b6a87a73efb34",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createCityRepository` has 28 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/cities.repository.ts",
            "lines": {
                "begin": 5,
                "end": 38
            }
        },
        "other_locations": [],
        "remediation_points": 672000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "50d360d54f2cc0f4e547560a7b666e5a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addIfemLocationRepository` has 32 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/ifemLocation.repository.ts",
            "lines": {
                "begin": 5,
                "end": 40
            }
        },
        "other_locations": [],
        "remediation_points": 768000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "ae4c1b5010479273270a0534fe860e39",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDistrictRepository` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/repositories/districts.repository.ts",
            "lines": {
                "begin": 5,
                "end": 37
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6d5878f00206bc276167576944606559",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getAllowedDepotsPaginationService` has 26 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/services/allowedDepots.services.ts",
            "lines": {
                "begin": 48,
                "end": 80
            }
        },
        "other_locations": [],
        "remediation_points": 624000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c8613081392269e9843f14a82eb28002",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getDispatchesService` has 31 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/services/dispatch.services.ts",
            "lines": {
                "begin": 29,
                "end": 67
            }
        },
        "other_locations": [],
        "remediation_points": 744000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e71033697c98320a67e54dcb8a1fb712",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `getReceivingDispatchesService` has 30 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/services/dispatch.services.ts",
            "lines": {
                "begin": 102,
                "end": 138
            }
        },
        "other_locations": [],
        "remediation_points": 720000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "3b0ef69cd6f2a4d20fed806f997fc152",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createVehicleValidation` has a Cognitive Complexity of 11 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 5,
                "end": 57
            }
        },
        "other_locations": [],
        "remediation_points": 750000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "e1d1a8dc55a0e7333b2e3b323854b94c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `updateVehicleValidation` has a Cognitive Complexity of 6 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 59,
                "end": 95
            }
        },
        "other_locations": [],
        "remediation_points": 250000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6605a0d5931a19a49c65c3f2c3acc73f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createVehicleValidation` has 46 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 5,
                "end": 57
            }
        },
        "other_locations": [],
        "remediation_points": 1104000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c6400dfe772fca55441e848addae226a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateVehicleValidation` has 30 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/vehicles.validations.ts",
            "lines": {
                "begin": 59,
                "end": 95
            }
        },
        "other_locations": [],
        "remediation_points": 720000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "d32c434a80f6c4471073db53e83dcf4a",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createDriversValidation` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/drivers.validations.ts",
            "lines": {
                "begin": 5,
                "end": 64
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "4ef1c34a56aa29219c7a395e7c3023de",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDriversValidation` has 53 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/drivers.validations.ts",
            "lines": {
                "begin": 5,
                "end": 64
            }
        },
        "other_locations": [],
        "remediation_points": 1272000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "00c3e0f5b7758d70d514d5bd15e0b7bc",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createCityValidation` has 28 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/cities.validations.ts",
            "lines": {
                "begin": 5,
                "end": 35
            }
        },
        "other_locations": [],
        "remediation_points": 672000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "4eefa0d0d904eac8e4a2a9736dd1d730",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createAllowedDepotValidation` has 40 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/allowedDepots.validations.ts",
            "lines": {
                "begin": 5,
                "end": 48
            }
        },
        "other_locations": [],
        "remediation_points": 960000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "f74ef233d9f4b882ff1390ad7717ecef",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `addUserValidation` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/users.validations.ts",
            "lines": {
                "begin": 4,
                "end": 52
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "0965bc00d566b30ef597920242c6ae6b",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `addUserValidation` has 41 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/users.validations.ts",
            "lines": {
                "begin": 4,
                "end": 52
            }
        },
        "other_locations": [],
        "remediation_points": 984000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "4f2ee9fedc185da1f8d1485fd3e1f93f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `updateUserValidation` has 34 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/users.validations.ts",
            "lines": {
                "begin": 81,
                "end": 119
            }
        },
        "other_locations": [],
        "remediation_points": 816000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "840c520eb68a4737a4fb6bb58df18158",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createDispatchValidation` has a Cognitive Complexity of 7 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/dispatch.validations.ts",
            "lines": {
                "begin": 5,
                "end": 43
            }
        },
        "other_locations": [],
        "remediation_points": 350000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "06ef257a8b8dccb3e8b42f93e0ebc03c",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDispatchValidation` has 36 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/dispatch.validations.ts",
            "lines": {
                "begin": 5,
                "end": 43
            }
        },
        "other_locations": [],
        "remediation_points": 864000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c7f1c1d9259f447d83563c6f14561434",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createOMCValidation` has a Cognitive Complexity of 12 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/omcs.validations.ts",
            "lines": {
                "begin": 5,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 850000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "019fac41ddb14bca2b1e52aa988bf7af",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createOMCValidation` has 64 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/omcs.validations.ts",
            "lines": {
                "begin": 5,
                "end": 76
            }
        },
        "other_locations": [],
        "remediation_points": 1536000,
        "severity": "major",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "cd867501ab007aacc940406393daf2db",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createCarriageContractorValidation` has 27 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/carriageContractor.validations.ts",
            "lines": {
                "begin": 5,
                "end": 39
            }
        },
        "other_locations": [],
        "remediation_points": 648000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "6eb501118f97d1b48636e7a9a56bb059",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDistrictValidation` has 28 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/districts.validations.ts",
            "lines": {
                "begin": 5,
                "end": 36
            }
        },
        "other_locations": [],
        "remediation_points": 672000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "3b7498148d0f2db71633c2566925f9e7",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createIFEMLocationValidation` has 29 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/ifemLocation.validations.ts",
            "lines": {
                "begin": 5,
                "end": 37
            }
        },
        "other_locations": [],
        "remediation_points": 696000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c4b3032fd7ab908e718040a2c4ab5d0f",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_complexity",
        "content": {
            "body": "# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"
        },
        "description": "Function `createDepotValidation` has a Cognitive Complexity of 8 (exceeds 5 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/depots.validations.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 450000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "3d6b684ba655ed405e042ba3162861c6",
        "categories": [
            "Complexity"
        ],
        "check_name": "method_lines",
        "content": {
            "body": ""
        },
        "description": "Function `createDepotValidation` has 36 lines of code (exceeds 25 allowed). Consider refactoring.",
        "location": {
            "path": "src/api/v1/validations/depots.validations.ts",
            "lines": {
                "begin": 5,
                "end": 45
            }
        },
        "other_locations": [],
        "remediation_points": 864000,
        "severity": "minor",
        "type": "issue"
    },
    {
        "engine_name": "structure",
        "fingerprint": "c2f9c568ed380c9d4cd91ee687a66710",
        "categories": [
            "Complexity"
        ],
        "check_name": "complex_logic",
        "content": {
            "body": ""
        },
        "description": "Consider simplifying this complex logical expression.",
        "location": {
            "path": "src/api/v1/helpers/fileHandler.ts",
            "lines": {
                "begin": 23,
                "end": 39
            }
        },
        "other_locations": [],
        "remediation_points": 1000000,
        "severity": "critical",
        "type": "issue"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 10,
                    "column": 42
                },
                "end": {
                    "line": 10,
                    "column": 42
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 17,
                    "column": 32
                },
                "end": {
                    "line": 17,
                    "column": 32
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 18,
                    "column": 8
                },
                "end": {
                    "line": 18,
                    "column": 8
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 19,
                    "column": 6
                },
                "end": {
                    "line": 19,
                    "column": 6
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 22,
                    "column": 31
                },
                "end": {
                    "line": 22,
                    "column": 31
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "8876af5a57c8ae64eac2bed3c1810f91",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.prod.js",
            "positions": {
                "begin": {
                    "line": 24,
                    "column": 50
                },
                "end": {
                    "line": 24,
                    "column": 50
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 10,
                    "column": 23
                },
                "end": {
                    "line": 10,
                    "column": 23
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 18,
                    "column": 32
                },
                "end": {
                    "line": 18,
                    "column": 32
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 25,
                    "column": 70
                },
                "end": {
                    "line": 25,
                    "column": 70
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 26,
                    "column": 12
                },
                "end": {
                    "line": 26,
                    "column": 12
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 28,
                    "column": 32
                },
                "end": {
                    "line": 28,
                    "column": 32
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 29,
                    "column": 8
                },
                "end": {
                    "line": 29,
                    "column": 8
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 30,
                    "column": 6
                },
                "end": {
                    "line": 30,
                    "column": 6
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 33,
                    "column": 31
                },
                "end": {
                    "line": 33,
                    "column": 31
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    },
    {
        "engine_name": "eslint",
        "fingerprint": "4d0fbdce4ea37af0c8e3bcd885f659a3",
        "type": "issue",
        "categories": [
            "Bug Risk"
        ],
        "check_name": "comma-dangle",
        "description": "Unexpected trailing comma.",
        "content": {
            "body": "# require or disallow trailing commas (comma-dangle)\n\nTrailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.\n\n```js\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n```\n\nTrailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched.\nAnother argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:\n\nLess clear:\n\n```diff\n var foo = {\n-    bar: \"baz\",\n-    qux: \"quux\"\n+    bar: \"baz\"\n };\n```\n\nMore clear:\n\n```diff\n var foo = {\n     bar: \"baz\",\n-    qux: \"quux\",\n };\n```\n\n## Rule Details\n\nThis rule enforces consistent use of trailing commas in object and array literals.\n\n## Options\n\nThis rule has a string option or an object option:\n\n```json\n{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"ignore\",\n    }]\n}\n```\n\n* `\"never\"` (default) disallows trailing commas\n* `\"always\"` requires trailing commas\n* `\"always-multiline\"` requires trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n* `\"only-multiline\"` allows (but does not require) trailing commas when the last element or property is in a *different* line than the closing `]` or `}` and disallows trailing commas when the last element or property is on the *same* line as the closing `]` or `}`\n\nTrailing commas in function declarations and function calls are valid syntax since ECMAScript 2017; however, the string option does not check these situations for backwards compatibility.\n\nYou can also use an object option to configure this rule for each type of syntax.\nEach of the following options can be set to `\"never\"`, `\"always\"`, `\"always-multiline\"`, `\"only-multiline\"`, or `\"ignore\"`.\nThe default for each option is `\"never\"` unless otherwise specified.\n\n* `arrays` is for array literals and array patterns of destructuring. (e.g. `let [a,] = [1,];`)\n* `objects` is for object literals and object patterns of destructuring. (e.g. `let {a,} = {a: 1};`)\n* `imports` is for import declarations of ES Modules. (e.g. `import {a,} from \"foo\";`)\n* `exports` is for export declarations of ES Modules. (e.g. `export {a,};`)\n* `functions` is for function declarations and function calls. (e.g. `(function(a,){ })(b,);`)<br>\n  `functions` is set to `\"ignore\"` by default for consistency with the string option.\n\n### never\n\nExamples of **incorrect** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\nExamples of **correct** code for this rule with the default `\"never\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"never\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### always\n\nExamples of **incorrect** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar arr = [1,2];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar arr = [1,2,];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### always-multiline\n\nExamples of **incorrect** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\nExamples of **correct** code for this rule with the `\"always-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n```\n\n### only-multiline\n\nExamples of **incorrect** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = { bar: \"baz\", qux: \"quux\", };\n\nvar arr = [1,2,];\n\nvar arr = [1,\n    2,];\n\n```\n\nExamples of **correct** code for this rule with the `\"only-multiline\"` option:\n\n```js\n/*eslint comma-dangle: [\"error\", \"only-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\"\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nvar arr = [\n    1,\n    2\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\"\n});\n```\n\n### functions\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"never\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"never\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **incorrect** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b) {\n}\n\nfoo(a, b);\nnew foo(a, b);\n```\n\nExamples of **correct** code for this rule with the `{\"functions\": \"always\"}` option:\n\n```js\n/*eslint comma-dangle: [\"error\", {\"functions\": \"always\"}]*/\n\nfunction foo(a, b,) {\n}\n\nfoo(a, b,);\nnew foo(a, b,);\n```\n\n## When Not To Use It\n\nYou can turn this rule off if you are not concerned with dangling commas.\nSource: http://eslint.org/docs/rules/\n"
        },
        "location": {
            "path": "webpack.config.js",
            "positions": {
                "begin": {
                    "line": 34,
                    "column": 4
                },
                "end": {
                    "line": 34,
                    "column": 4
                }
            }
        },
        "remediation_points": 50000,
        "severity": "minor"
    }
]
